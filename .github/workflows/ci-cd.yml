name: Python CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PYTHON_VERSION: '3.10'
  MAX_LINE_LENGTH: 200
  REPO_URL: https://github.com/its-kios09/pet-simulator.git

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN || secrets.GH_PAT }}
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Black
      run: pip install black
    - name: Run Black formatting
      run: black app/ --line-length ${{ env.MAX_LINE_LENGTH }}
    - name: Commit formatted changes
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add .
        if ! git diff --quiet || ! git diff --cached --quiet; then
          git commit -m "Format code with Black"
          git push
        else
          echo "No changes to commit"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || secrets.GH_PAT }}

  test:
    needs: format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest pytest-cov
    - name: Run tests with coverage
      run: |
        pytest app/tests/ --cov=app --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        verbose: true

  lint:
    needs: format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install linters
      run: |
        python -m pip install --upgrade pip
        pip install black flake8
    - name: Run Black check
      run: black --check app/ --line-length ${{ env.MAX_LINE_LENGTH }}
    - name: Run Flake8
      run: flake8 app/ --max-line-length=${{ env.MAX_LINE_LENGTH }}

  release:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pyinstaller
    - name: Create executable
      run: |
        pyinstaller --onefile app/pet_simulator.py -n pet_simulator
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: pet-simulator
        path: dist/pet_simulator
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        files: dist/pet_simulator
        generate_release_notes: true
